type Solo[] extends Player[] {
  define winCondition[$gameState] =
    $gameState.matchSquares[
      [A1, A2, A3, B1, B2, B3, C1, C2],
      /Black/
    ].size == 8
}
type White[$player] extends Piece[$player] {
  define actions[$gameState] =
    union[
      $gameState.findAllMoves[this, /this e|n empty/],
      $gameState.findAllMoves[this, /this e Black e empty/],
      $gameState.findAllMoves[this, /this n Black n empty/]
    ]
}
type Black[$player] extends Piece[$player] {
  define actions[$gameState] =
    union[
      $gameState.findAllMoves[this, /this w|s empty/],
      $gameState.findAllMoves[this, /this w White w empty/],
      $gameState.findAllMoves[this, /this s White s empty/]
    ]
}
type KentGame[] extends Game["Kents Spil"] {
  define players = [Solo[]]
  define board = GridBoard[5, 5]
    .addPieces[White[players[0], e, n], [A1, A2, A3, B1, B2, B3, C1, C2]]
    .addPieces[Black[players[0], w, s], [C4, C5, D3, D4, D5, E3, E4, E5]]
    // MISSING WALLS!!!
}
