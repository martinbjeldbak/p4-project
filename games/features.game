define max[$a, $b] if $a > $b then $a else $b
define min[$a, $b] if $a < $b then $a else $b
define add[$a, $b] $a + $b
define comp[$f, $g] #[$x] => $f[$g[$x]]

define hello[] "Hello"
define world[] "World"
define movePiece[$from, $to] 0

define reverse[$list]
  if 0 == size[$list]
    then []
    else (reverse[$list[1, -1]]) + [$list[0]]

define factorial[$n]
  if $n == 0
    then 1
    else $n * factorial[$n - 1]

define gcd[$a, $b]
  if $b == 0
    then $a
    else gcd[$b, $a % $b]

define fpower[$f, $n]
  if $n == 1
    then $f
    else comp[$f, fpower[$f, $n - 1]]

define map[$f, $list]
  let $l = size[$list]
    in if $l == 1
      then [$f[$list[0]]]
      else [$f[$list[0]]] + map[$f, $list[1, -1]]

define contains[$needle, $haystack]
  (0 == size[$haystack])
    and (($needle == $haystack[0])
      or contains[$needle, $haystack[1, -1]]
    )

define find[$needle, $haystack]
  if 0 == size[$haystack]
    then -1
    else if $needle == $haystack[0]
      then 0
      else let $r = find[$needle, $haystack[1, -1]]
        in if $r >= 0
          then $r + 1
          else $r

define filter[$predicate, $list]
  if 1 > size[$list]
    then $list
    else (if $predicate[$list[0]]
      then $list[0]
      else []) + filter[$predicate, $list[1, -1]]


define qsort[$list]
  if 1 >= size[$list]
    then $list
    else let $p = $list[0],
             $rest = $list[1, -1],
             $lesser = filter[#[$x] => $x < $p, $rest],
             $greater = filter[#[$x] => $x >= $p, $rest]
      in (qsort[$lesser]) + [$p] + (qsort[$greater])

define varsTestOne[$a, ... $args] 0
define varsTestTwo[$a, $b, ... $args] 0
define do[... $actions] 0
define sequence[... $actions] 0
define bind[$result, $action] 0
define writeLine[$line] 0
define readLine[] 0

define testIo[]
  sequence[
    writeLine["What is your name?"],
    bind[
      readLine[],
      #[$name] => writeLine["Nice to meet you, " + $name]
    ]
  ]

define giveMeAnAction[]
  sequence[
    movePiece[A1, A2],
    movePiece[A2, A3]
  ]
                          

game {
  title (hello[]) + ", " + (world[]) + "!"
  winCondition
    let $f = #[$a] => 5 + $a,
        $g = #[$a] => $a / 3
      in (comp[$f, $g])[9]
  tieCondition
    let $x = let $x = 5 in $x + 5
      in let $x = $x - 5
        in $x
  tieCondition
    let $a = #[$a] => #[$b, $c] => $b[$c + $a]
      in ($a[12])[#[$b] => $b * 3, 5]
}
