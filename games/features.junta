define max[$a, $b] = if $a > $b then $a else $b
define min[$a, $b] = if $a < $b then $a else $b
define add[$a, $b] = $a + $b
define comp[$f, $g] = #[$x] => $f[$g[$x]]

define hello[] = "Hello"
define world[] = "World"
define movePiece[$from, $to] = 0

define reverse[$list] =
  if size[$list] == 0
    then []
    else (reverse[$list[1, -1]]) + [$list[0]]

define factorial[$n] =
  if $n == 0
    then 1
    else $n * factorial[$n - 1]

define gcd[$a, $b] =
  if $b == 0
    then $a
    else gcd[$b, $a % $b]

define fpower[$f, $n] =
  if $n == 1
    then $f
    else comp[$f, fpower[$f, $n - 1]]

define map[$f, $list] =
  let $l = size[$list]
    in if $l == 1
      then [$f[$list[0]]]
      else [$f[$list[0]]] + map[$f, $list[1, -1]]

define contains[$needle, $haystack] =
  size[$haystack] == 0
    and ($needle == $haystack[0]
      or contains[$needle, $haystack[1, -1]]
    )

define find[$needle, $haystack] =
  if size[$haystack] == 0
    then -1
    else if $needle == $haystack[0]
      then 0
      else let $r = find[$needle, $haystack[1, -1]]
        in if $r >= 0
          then $r + 1
          else $r

define filter[$predicate, $list] =
  if size[$list] < 1
    then $list
    else (if $predicate[$list[0]]
      then [$list[0]]
      else []) + (if size[$list] > 1
        then filter[$predicate, $list[1, -1]]
        else [])


define qsort[$list] =
  if size[$list] <= 1
    then $list
    else let $p = $list[0],
             $rest = $list[1, -1],
             $lesser = filter[#[$x] => $x < $p, $rest],
             $greater = filter[#[$x] => $x >= $p, $rest]
      in qsort[$lesser] + [$p] + qsort[$greater]

type Unsigned[$i] extends Integer[if $i < 0 then -$i else $i]

type MyListA[... $list] extends Function[#[$offset] => $list[$offset]]

type MyListB[... $list] extends List[$list]

type A[$b] {
	define abstract aNumber
	define aFunc[$a] = $a + aNumber
}

type B[$c] extends A[$c + 1] {
	define aNumber = 13
}

define main = B[3].aFunc[2]
                          
define main = qsort[MyListB[26, 2, 1, -2, 35, 2]]

define qsort[$list, $f] =
  if $list.size <= 1
    then $list
    else let $p = $list[0],
             $rest = $list[1, -1],
             $lesser = $rest.filter[#[$x] => $f[$x, $p] < 0],
             $greater = $rest.filter[#[$x] => $f[$x, $p] >= 0]
      in qsort[$lesser, $f] + [$p] + qsort[$greater, $f]

define countList[$n] =
  if $n < 1
    then []
    else [$n] + countList[$n - 1]

type MyList[... $l] extends List[$l] {
  define size[] = 2
}

define uselessTailRecA[$n] =
  if $n == 0
    then 0
    else uselessTailRecA[$n - 1]

define main = uselessTailRecA[1000000]


// Getters and setters??
type Test[$a, $b] {
  define a = $a
  define setA[$a] = Test[$a, $b]
  define b = $b
  define setB[$b] = Test[$a, $b]
}

type A[] {
  data $a = 2
  data $b = 3
  define next = set $a = $a + 1
  define getA[] = $a
}

type B[] extends A[] {
  data $c = 10
  define ass[$d] = set $c = $d
  define mySuper = super
  define getB[] = getA[] + $c
}

define main = let $b = B[] in
[$b.next.next.getB[], $b.getB[], $b.next.ass[3].next.getB[]]

