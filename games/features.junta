define max[$a, $b] = if $a > $b then $a else $b
define min[$a, $b] = if $a < $b then $a else $b
define add[$a, $b] = $a + $b
define comp[$f, $g] = #[$x] => $f[$g[$x]]

define hello[] = "Hello"
define world[] = "World"
define movePiece[$from, $to] = 0

define reverse[$list] =
  if size[$list] == 0
    then []
    else (reverse[$list[1, -1]]) + [$list[0]]

define factorial[$n] =
  if $n == 0
    then 1
    else $n * factorial[$n - 1]

define gcd[$a, $b] =
  if $b == 0
    then $a
    else gcd[$b, $a % $b]

define fpower[$f, $n] =
  if $n == 1
    then $f
    else comp[$f, fpower[$f, $n - 1]]

define map[$f, $list] =
  let $l = size[$list]
    in if $l == 1
      then [$f[$list[0]]]
      else [$f[$list[0]]] + map[$f, $list[1, -1]]

define contains[$needle, $haystack] =
  size[$haystack] == 0
    and ($needle == $haystack[0]
      or contains[$needle, $haystack[1, -1]]
    )

define find[$needle, $haystack] =
  if size[$haystack] == 0
    then -1
    else if $needle == $haystack[0]
      then 0
      else let $r = find[$needle, $haystack[1, -1]]
        in if $r >= 0
          then $r + 1
          else $r

define filter[$predicate, $list] =
  if size[$list] < 1
    then $list
    else (if $predicate[$list[0]]
      then [$list[0]]
      else []) + (if size[$list] > 1
        then filter[$predicate, $list[1, -1]]
        else [])


define qsort[$list] =
  if size[$list] <= 1
    then $list
    else let $p = $list[0],
             $rest = $list[1, -1],
             $lesser = filter[#[$x] => $x < $p, $rest],
             $greater = filter[#[$x] => $x >= $p, $rest]
      in qsort[$lesser] + [$p] + qsort[$greater]

                          
define main = qsort[[26, 2, 1, -2, 35, 2]]
