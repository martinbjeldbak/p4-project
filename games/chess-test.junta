type Chess[] extends Game["Chess"]{
  define players = [ ChessPlayer[ "Black" ], ChessPlayer[ "White" ] ]
  define initialBoard = let $black = players[0], $white = players[1] in
    ChessBoard[]
      .addPieces[ Pawn[ $black, s ], [ A7, B7, C7, D7, E7, F7, G7, H7 ] ]
      .addPieces[ Rook[ $black ],    [ A8, H8 ] ]
      .addPieces[ Knight[ $black ],  [ B8, G8 ] ]
      .addPieces[ Bishop[ $black ],  [ C8, F8 ] ]
      .addPieces[ Queen[ $black ],   [ E8 ] ]
      .addPieces[ King[ $black ],    [ D8 ] ]

      .addPieces[ Pawn[ $white, n ], [ A2, B2, C2, D2, E2, F2, G2, H2 ] ]
      .addPieces[ Rook[ $white ],    [ A1, H1 ] ]
      .addPieces[ Knight[ $white ],  [ B1, G1 ] ]
      .addPieces[ Bishop[ $white ],  [ C1, F1 ] ]
      .addPieces[ Queen[ $white ],   [ E1 ] ]
      .addPieces[ King[ $white ],    [ D1 ] ]
}	

type WhiteSquare[] extends Square[]
type BlackSquare[] extends Square[]
type ChessBoard[] extends GridBoard[ 8,8 ]{
  define squareTypes = [ WhiteSquare[], BlackSquare[] ]
}

type ChessPlayer[ $color ] extends Player[ $color ]{

  //	define winCondition[$game] = findSquares[ /King !isSecure/ ] // questionable!	
}

type White[] extends ChessPlayer[ "White" ]{ }
type Black[] extends ChessPlayer[ "Black" ]{ }

type ChessPiece[ $player ] extends Piece[ $player ]{

}

type Pawn[ $player, $dir ] extends ChessPiece[ $player ]{

}

type Rook[ $player ] extends ChessPiece[ $player ]{

}

type Knight[ $player ] extends ChessPiece[ $player ]{

}

type Bishop[ $player ] extends ChessPiece[ $player ]{

}

type Queen[ $player ] extends ChessPiece[ $player ]{

}

type King[ $player ] extends ChessPiece[ $player ]{

}
