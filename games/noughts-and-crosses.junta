type NacGame[] extends Game["Noughts and Crosses"] {
  define players = [
    NacPlayer[Crosses, "Crosses"],
    NacPlayer[Noughts, "Noughts"]
  ]
  define board = GridBoard[3, 3]
}
type NacPlayer[$pieceType, $name] extends Player[$name] {
  define winCondition[$gameState] =
    $gameState.findSquares[
      /friend (n friend n) | (e friend e) |
		(nw friend nw) | (ne friend ne ) friend/].size != 0
  define tieCondition[$gameState] =
    $gameState.board.isFull
  define actions[$gameState] =
    addActions[$pieceType[this], $gameState.board.emptySquares]
}
type Crosses[$owner] extends Piece[$owner]
type Noughts[$owner] extends Piece[$owner]

define main = let
  $g = NacGame[],
  $p = $g.players[0],
  $gB = $g.applyAction[AddAction[Crosses[$p], $g.currentBoard.squareAt[A1]]]
    in [
      $gB.undoAction[$gB.history[0]].currentBoard.squareAt[A1].pieces,
      $gB.currentBoard.squareAt[A1].pieces
    ]
