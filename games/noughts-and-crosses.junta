type NacGame[] extends Game["Noughts and Crosses"] {
  define players = [
    NacPlayer[Crosses, "Crosses"],
    NacPlayer[Noughts, "Noughts"]
  ]
  define initialBoard = GridBoard[3, 3]
}
type NacPlayer[$pieceType, $name] extends Player[$name] {
  define winCondition[$gameState] =
    $gameState.findSquares[
      /friend (n friend n) | (e friend e) |
		(nw friend nw) | (ne friend ne ) friend/].size != 0
  define tieCondition[$gameState] =
    $gameState.board.isFull
  define actions[$gameState] =
    addActions[$pieceType[this], $gameState.board.emptySquares]
}
type Crosses[$owner] extends Piece[$owner]
type Noughts[$owner] extends Piece[$owner]

type NacTest[] extends TestCase[] {
  data $stateA = NacGame[]
  define testTitle = $stateA.title == "Noughts and Crosses"
  define testPlayersLength = $stateA.players.size == 2
  define testPlayersNotEqual = $stateA.players[0] != $stateA.players[1]
  define testCurrentPlayerA = $stateA.currentPlayer == $stateA.players[0]
  data $stateB = $stateA.nextTurn[]
  define testCurrentPlayerB = $stateB.currentPlayer == $stateB.players[1]
  data $stateC = $stateB.nextTurn[]
  define testCurrentPlayerC = $stateC.currentPlayer == $stateC.players[0]
  define testImmutablePlayers = $stateA.players == $stateB.players and
                                 $stateB.players == $stateC.players
  define testEmptySquaresA = $stateA.board.emptySquares.size == 9
  define testPlayerActionsA = $stateA.players[0].actions[$stateA].size == 9
  data $stateD = $stateA.applyAction[$stateA.players[0].actions[$stateA][0]]
  define testEmptySquaresB = $stateD.board.emptySquares.size == 8
  define testPlayerActionsB = $stateD.players[1].actions[$stateD].size == 8
}


define main = let
  $g = NacGame[],
  $p = $g.players[0],
  $gB = $g.applyAction[AddAction[Crosses[$p], $g.board.squareAt[A1]]]
    in $gB.board.emptySquares.size
