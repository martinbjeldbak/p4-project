type Solo[] extends Player[] {
  define winCondition[$gameState]
    8 == size[matchSquares[
      [A1, A2, A3, B1, B2, B3, C1, C2],
      /Black/,
      $gameState
    ]]
}
type White[$player] extends Piece[$player] {
  define actions[$gameState]
    union[
      findActions[/this e|n empty/, $gameState],
      findActions[/this e Black e empty/, $gameState],
      findActions[/this n Black n empty/, $gameState]
    ]
}
type Black[$player] extends Piece[$player] {
  define actions[$gameState]
    union[
      findSquares[/this w|s empty/, $gameState],
      findSquares[/this w White w empty/, $gameState],
      findSquares[/this s White s empty/, $gameState]
    ]
}
type KentGame[] extends Game[“Kents Spil”] {
  constant $players = [Solo[]]
  constant $board = GridBoard[5, 5]
    .addPieces[White[$players[0], e, n], [A1, A2, A3, B1, B2, B3, C1, C2]]
    .addPieces[White[$players[0], w, s], [C4, C5, D3, D4, D5, E3, E4, E5]]
}
