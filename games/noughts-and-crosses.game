type NacGame[] extends Game["Noughts and Crosses"] {
  constant $players = [NacPlayer[Crosses], NacPlayer[Noughts]]
  constant $board = GridBoard[3, 3]
}

type NacPlayer[$pieceType] extends Player[] {
  define winCondition[$gameState]
    0 != size[findSquares[
      /friend (n friend n) | (e friend e) |
		(nw friend nw) | (ne friend ne ) friend/,
      $gameState]]
  define tieCondition[$gameState]
    isFull[$gameState.$board]
  define actions[$gameState]
    addActions[$pieceType[this], $gameState.$board.emptySquares[]]
}

type Crosses[$owner] extends Piece[$owner] {
}

type Noughts[$owner] extends Piece[$owner] {
}


  piece Piece {
    possibleDrops emptySquares[board]
  }
}
