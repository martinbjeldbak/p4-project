
// PROGRAM STRUCTURE
program           -> {definition}
definition        -> function_def
                   | type_def
function_def      -> "define" function [varlist] "=" expression
type_def          -> "type" type varlist ["extends" type list] [type_body]
type_body         -> "{" {member_def} "}"
member_def        -> abstract_def
                   | function_def
abstract_def      -> "define" "abstract" function [varlist]
varlist           -> "[" [variable { "," variable} ["," vars] | vars] "]"
vars              -> "..." variable

// EXPRESSIONS

expression        -> assignment
                   | if_expr
                   | lambda_expr
                   | "not" expression
                   | operation
operation         -> minus_op [operator expression]
minus_op          -> "-" call
call              -> element [list]
element           -> atomic {member_access}
member_access     -> "." function [list]
atomic            -> "(" expression ")"
                   | variable
                   | list
                   | "/" pattern "/"
                   | "this"
                   | "super"
                   | direction
                   | coordinate
                   | integer
                   | string
                   | type
                   | function
assignment        -> "let" variable "=" expression {"," variable "=" expression} "in" expression
if_expr           -> "if" expression "then" expression "else" expression
lambda_expr       -> "#" varlist "=>" expression
list              -> "[" [expression {"," expression}] "]"

// PATTERNS

pattern           -> pattern_expr {pattern_expr}
pattern_expr      -> pattern_val ["*" | "?" | "+"]
                   | pattern_val "|" pattern_expr
pattern_val       -> direction
                   | variable
                   | pattern_check
                   | "!" pattern_check
                   | "(" pattern ")" [integer]
pattern_check     -> pattern_keyword
                   | "this"
                   | identifier
