/* This file was generated by SableCC (http://www.sablecc.org/). */

package dk.aau.cs.d402f13.ScannerParser.parser;

import dk.aau.cs.d402f13.ScannerParser.lexer.*;
import dk.aau.cs.d402f13.ScannerParser.node.*;
import dk.aau.cs.d402f13.ScannerParser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AFunctionDef */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AGameDecl */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ADeclStruct */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AKeystrucDecl */
            {
                ArrayList<Object> list = new5();
                push(goTo(4), list, false);
            }
            break;
            case 6: /* reduce AIdstrucDecl */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce ADeclstrucStructure */
            {
                ArrayList<Object> list = new7();
                push(goTo(5), list, false);
            }
            break;
            case 8: /* reduce AExprStructure */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce AFuncExpression */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list, false);
            }
            break;
            case 10: /* reduce AElopexpExpression */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AIfExpression */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce ALambdaExpression */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AElExpression */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce ANotExpression */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AExprElement */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce AVarElement */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AListElement */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce APatElement */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list, false);
            }
            break;
            case 19: /* reduce AKeyElement */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce ADirElement */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce ACorElement */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list, false);
            }
            break;
            case 22: /* reduce AIntElement */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list, false);
            }
            break;
            case 23: /* reduce AStrElement */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list, false);
            }
            break;
            case 24: /* reduce AIdElement */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list, false);
            }
            break;
            case 25: /* reduce AFuncElement */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list, false);
            }
            break;
            case 26: /* reduce AFunctionCall */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list, false);
            }
            break;
            case 27: /* reduce AIfExpr */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list, false);
            }
            break;
            case 28: /* reduce AAlambdaexpr1LambdaExpr */
            {
                ArrayList<Object> list = new28();
                push(goTo(10), list, false);
            }
            break;
            case 29: /* reduce AAlambdaexpr2LambdaExpr */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list, false);
            }
            break;
            case 30: /* reduce AAlist1List */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list, false);
            }
            break;
            case 31: /* reduce AAlist2List */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list, false);
            }
            break;
            case 32: /* reduce APattern */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list, false);
            }
            break;
            case 33: /* reduce APatvalPatternExpr */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list, false);
            }
            break;
            case 34: /* reduce APatvalqmarkPatternExpr */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list, false);
            }
            break;
            case 35: /* reduce ADirPatternVal */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list, false);
            }
            break;
            case 36: /* reduce AVarPatternVal */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list, false);
            }
            break;
            case 37: /* reduce APatcheckPatternVal */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list, false);
            }
            break;
            case 38: /* reduce AEmarkpatcheckPatternVal */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list, false);
            }
            break;
            case 39: /* reduce ALpatexprrPatternVal */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list, false);
            }
            break;
            case 40: /* reduce ALpatxprrintPatternVal */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list, false);
            }
            break;
            case 41: /* reduce AFriendPatternCheck */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list, false);
            }
            break;
            case 42: /* reduce AFoePatternCheck */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list, false);
            }
            break;
            case 43: /* reduce AEmptyPatternCheck */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list, false);
            }
            break;
            case 44: /* reduce AThisPatternCheck */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list, false);
            }
            break;
            case 45: /* reduce AIdPatternCheck */
            {
                ArrayList<Object> list = new45();
                push(goTo(15), list, false);
            }
            break;
            case 46: /* reduce ATerminal$FunctionDef */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list, true);
            }
            break;
            case 47: /* reduce ANonTerminal$FunctionDef */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list, true);
            }
            break;
            case 48: /* reduce ATerminal$Decl */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list, true);
            }
            break;
            case 49: /* reduce ANonTerminal$Decl */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list, true);
            }
            break;
            case 50: /* reduce ATerminal$Variable */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list, true);
            }
            break;
            case 51: /* reduce ANonTerminal$Variable */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list, true);
            }
            break;
            case 52: /* reduce ATerminal$Element */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list, true);
            }
            break;
            case 53: /* reduce ANonTerminal$Element */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list, true);
            }
            break;
            case 54: /* reduce ATerminal$PatternExpr */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, true);
            }
            break;
            case 55: /* reduce ANonTerminal$PatternExpr */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PGameDecl pgamedeclNode3;
        {
            // Block
        }
        pgamedeclNode3 = (PGameDecl)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(listNode2, pgamedeclNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PGameDecl pgamedeclNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pgamedeclNode4 = (PGameDecl)nodeArrayList2.get(0);

        pprogramNode1 = new AProgram(listNode3, pgamedeclNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AFunctionDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDef pfunctiondefNode1;
        {
            // Block
        TDefine tdefineNode2;
        TFunction tfunctionNode3;
        TLBkt tlbktNode4;
        TVariable tvariableNode5;
        TRBkt trbktNode6;
        PExpression pexpressionNode7;
        tdefineNode2 = (TDefine)nodeArrayList1.get(0);
        tfunctionNode3 = (TFunction)nodeArrayList2.get(0);
        tlbktNode4 = (TLBkt)nodeArrayList3.get(0);
        tvariableNode5 = (TVariable)nodeArrayList4.get(0);
        trbktNode6 = (TRBkt)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);

        pfunctiondefNode1 = new AFunctionDef(tdefineNode2, tfunctionNode3, tlbktNode4, tvariableNode5, trbktNode6, pexpressionNode7);
        }
	nodeList.add(pfunctiondefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AGameDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGameDecl pgamedeclNode1;
        {
            // Block
        TGame tgameNode2;
        PDeclStruct pdeclstructNode3;
        tgameNode2 = (TGame)nodeArrayList1.get(0);
        pdeclstructNode3 = (PDeclStruct)nodeArrayList2.get(0);

        pgamedeclNode1 = new AGameDecl(tgameNode2, pdeclstructNode3);
        }
	nodeList.add(pgamedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclStruct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclStruct pdeclstructNode1;
        {
            // Block
        TLBrc tlbrcNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRBrc trbrcNode5;
        tlbrcNode2 = (TLBrc)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbrcNode5 = (TRBrc)nodeArrayList3.get(0);

        pdeclstructNode1 = new ADeclStruct(tlbrcNode2, listNode4, trbrcNode5);
        }
	nodeList.add(pdeclstructNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AKeystrucDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TKeyword tkeywordNode2;
        PStructure pstructureNode3;
        tkeywordNode2 = (TKeyword)nodeArrayList1.get(0);
        pstructureNode3 = (PStructure)nodeArrayList2.get(0);

        pdeclNode1 = new AKeystrucDecl(tkeywordNode2, pstructureNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AIdstrucDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PStructure pstructureNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pstructureNode3 = (PStructure)nodeArrayList2.get(0);

        pdeclNode1 = new AIdstrucDecl(tidentifierNode2, pstructureNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADeclstrucStructure */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStructure pstructureNode1;
        {
            // Block
        PDeclStruct pdeclstructNode2;
        pdeclstructNode2 = (PDeclStruct)nodeArrayList1.get(0);

        pstructureNode1 = new ADeclstrucStructure(pdeclstructNode2);
        }
	nodeList.add(pstructureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AExprStructure */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStructure pstructureNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pstructureNode1 = new AExprStructure(pexpressionNode2);
        }
	nodeList.add(pstructureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AFuncExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFuncExpression(pfunctioncallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AElopexpExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PElement pelementNode2;
        TOperator toperatorNode3;
        PExpression pexpressionNode4;
        pelementNode2 = (PElement)nodeArrayList1.get(0);
        toperatorNode3 = (TOperator)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AElopexpExpression(pelementNode2, toperatorNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AIfExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PIfExpr pifexprNode2;
        pifexprNode2 = (PIfExpr)nodeArrayList1.get(0);

        pexpressionNode1 = new AIfExpression(pifexprNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ALambdaExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PLambdaExpr plambdaexprNode2;
        plambdaexprNode2 = (PLambdaExpr)nodeArrayList1.get(0);

        pexpressionNode1 = new ALambdaExpression(plambdaexprNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AElExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PElement pelementNode2;
        pelementNode2 = (PElement)nodeArrayList1.get(0);

        pexpressionNode1 = new AElExpression(pelementNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANotExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TNot tnotNode2;
        PExpression pexpressionNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANotExpression(tnotNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AExprElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpression pexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pelementNode1 = new AExprElement(tlparNode2, pexpressionNode3, trparNode4);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVarElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TVariable tvariableNode2;
        tvariableNode2 = (TVariable)nodeArrayList1.get(0);

        pelementNode1 = new AVarElement(tvariableNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AListElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        PList plistNode2;
        plistNode2 = (PList)nodeArrayList1.get(0);

        pelementNode1 = new AListElement(plistNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce APatElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        PPattern ppatternNode2;
        ppatternNode2 = (PPattern)nodeArrayList1.get(0);

        pelementNode1 = new APatElement(ppatternNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AKeyElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TKeyword tkeywordNode2;
        tkeywordNode2 = (TKeyword)nodeArrayList1.get(0);

        pelementNode1 = new AKeyElement(tkeywordNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ADirElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TDirection tdirectionNode2;
        tdirectionNode2 = (TDirection)nodeArrayList1.get(0);

        pelementNode1 = new ADirElement(tdirectionNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ACorElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TCoordinate tcoordinateNode2;
        tcoordinateNode2 = (TCoordinate)nodeArrayList1.get(0);

        pelementNode1 = new ACorElement(tcoordinateNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIntElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pelementNode1 = new AIntElement(tintegerNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AStrElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pelementNode1 = new AStrElement(tstringNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AIdElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pelementNode1 = new AIdElement(tidentifierNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AFuncElement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElement pelementNode1;
        {
            // Block
        TFunction tfunctionNode2;
        tfunctionNode2 = (TFunction)nodeArrayList1.get(0);

        pelementNode1 = new AFuncElement(tfunctionNode2);
        }
	nodeList.add(pelementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TFunction tfunctionNode2;
        PList plistNode3;
        tfunctionNode2 = (TFunction)nodeArrayList1.get(0);
        plistNode3 = (PList)nodeArrayList2.get(0);

        pfunctioncallNode1 = new AFunctionCall(tfunctionNode2, plistNode3);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIfExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfExpr pifexprNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        PExpression pexpressionNode5;
        TElse telseNode6;
        PExpression pexpressionNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        telseNode6 = (TElse)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);

        pifexprNode1 = new AIfExpr(tifNode2, pexpressionNode3, tthenNode4, pexpressionNode5, telseNode6, pexpressionNode7);
        }
	nodeList.add(pifexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAlambdaexpr1LambdaExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLambdaExpr plambdaexprNode1;
        {
            // Block
        TPound tpoundNode2;
        TLBkt tlbktNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRBkt trbktNode5;
        TArrow tarrowNode6;
        PExpression pexpressionNode7;
        tpoundNode2 = (TPound)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        {
            // Block
        }
        trbktNode5 = (TRBkt)nodeArrayList3.get(0);
        tarrowNode6 = (TArrow)nodeArrayList4.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList5.get(0);

        plambdaexprNode1 = new ALambdaExpr(tpoundNode2, tlbktNode3, listNode4, trbktNode5, tarrowNode6, pexpressionNode7);
        }
	nodeList.add(plambdaexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAlambdaexpr2LambdaExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLambdaExpr plambdaexprNode1;
        {
            // Block
        TPound tpoundNode2;
        TLBkt tlbktNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRBkt trbktNode6;
        TArrow tarrowNode7;
        PExpression pexpressionNode8;
        tpoundNode2 = (TPound)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbktNode6 = (TRBkt)nodeArrayList4.get(0);
        tarrowNode7 = (TArrow)nodeArrayList5.get(0);
        pexpressionNode8 = (PExpression)nodeArrayList6.get(0);

        plambdaexprNode1 = new ALambdaExpr(tpoundNode2, tlbktNode3, listNode5, trbktNode6, tarrowNode7, pexpressionNode8);
        }
	nodeList.add(plambdaexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAlist1List */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PList plistNode1;
        {
            // Block
        TLBkt tlbktNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TRBkt trbktNode4;
        tlbktNode2 = (TLBkt)nodeArrayList1.get(0);
        {
            // Block
        }
        trbktNode4 = (TRBkt)nodeArrayList2.get(0);

        plistNode1 = new AList(tlbktNode2, listNode3, trbktNode4);
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAlist2List */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PList plistNode1;
        {
            // Block
        TLBkt tlbktNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRBkt trbktNode5;
        tlbktNode2 = (TLBkt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbktNode5 = (TRBkt)nodeArrayList3.get(0);

        plistNode1 = new AList(tlbktNode2, listNode4, trbktNode5);
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce APattern */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPattern ppatternNode1;
        {
            // Block
        TSlash tslashNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSlash tslashNode5;
        tslashNode2 = (TSlash)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tslashNode5 = (TSlash)nodeArrayList3.get(0);

        ppatternNode1 = new APattern(tslashNode2, listNode4, tslashNode5);
        }
	nodeList.add(ppatternNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce APatvalPatternExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternExpr ppatternexprNode1;
        {
            // Block
        PPatternVal ppatternvalNode2;
        ppatternvalNode2 = (PPatternVal)nodeArrayList1.get(0);

        ppatternexprNode1 = new APatvalPatternExpr(ppatternvalNode2);
        }
	nodeList.add(ppatternexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce APatvalqmarkPatternExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternExpr ppatternexprNode1;
        {
            // Block
        PPatternVal ppatternvalNode2;
        TStarQmarkPlus tstarqmarkplusNode3;
        ppatternvalNode2 = (PPatternVal)nodeArrayList1.get(0);
        tstarqmarkplusNode3 = (TStarQmarkPlus)nodeArrayList2.get(0);

        ppatternexprNode1 = new APatvalqmarkPatternExpr(ppatternvalNode2, tstarqmarkplusNode3);
        }
	nodeList.add(ppatternexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ADirPatternVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternVal ppatternvalNode1;
        {
            // Block
        TDirection tdirectionNode2;
        tdirectionNode2 = (TDirection)nodeArrayList1.get(0);

        ppatternvalNode1 = new ADirPatternVal(tdirectionNode2);
        }
	nodeList.add(ppatternvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AVarPatternVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternVal ppatternvalNode1;
        {
            // Block
        TVariable tvariableNode2;
        tvariableNode2 = (TVariable)nodeArrayList1.get(0);

        ppatternvalNode1 = new AVarPatternVal(tvariableNode2);
        }
	nodeList.add(ppatternvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce APatcheckPatternVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternVal ppatternvalNode1;
        {
            // Block
        PPatternCheck ppatterncheckNode2;
        ppatterncheckNode2 = (PPatternCheck)nodeArrayList1.get(0);

        ppatternvalNode1 = new APatcheckPatternVal(ppatterncheckNode2);
        }
	nodeList.add(ppatternvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEmarkpatcheckPatternVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternVal ppatternvalNode1;
        {
            // Block
        TEmark temarkNode2;
        PPatternCheck ppatterncheckNode3;
        temarkNode2 = (TEmark)nodeArrayList1.get(0);
        ppatterncheckNode3 = (PPatternCheck)nodeArrayList2.get(0);

        ppatternvalNode1 = new AEmarkpatcheckPatternVal(temarkNode2, ppatterncheckNode3);
        }
	nodeList.add(ppatternvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ALpatexprrPatternVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternVal ppatternvalNode1;
        {
            // Block
        TLPar tlparNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRPar trparNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        ppatternvalNode1 = new ALpatexprrPatternVal(tlparNode2, listNode4, trparNode5);
        }
	nodeList.add(ppatternvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ALpatxprrintPatternVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternVal ppatternvalNode1;
        {
            // Block
        TLPar tlparNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRPar trparNode5;
        TInteger tintegerNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        tintegerNode6 = (TInteger)nodeArrayList4.get(0);

        ppatternvalNode1 = new ALpatxprrintPatternVal(tlparNode2, listNode4, trparNode5, tintegerNode6);
        }
	nodeList.add(ppatternvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AFriendPatternCheck */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternCheck ppatterncheckNode1;
        {
            // Block
        TFriend tfriendNode2;
        tfriendNode2 = (TFriend)nodeArrayList1.get(0);

        ppatterncheckNode1 = new AFriendPatternCheck(tfriendNode2);
        }
	nodeList.add(ppatterncheckNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AFoePatternCheck */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternCheck ppatterncheckNode1;
        {
            // Block
        TFoe tfoeNode2;
        tfoeNode2 = (TFoe)nodeArrayList1.get(0);

        ppatterncheckNode1 = new AFoePatternCheck(tfoeNode2);
        }
	nodeList.add(ppatterncheckNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AEmptyPatternCheck */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternCheck ppatterncheckNode1;
        {
            // Block
        TEmpty temptyNode2;
        temptyNode2 = (TEmpty)nodeArrayList1.get(0);

        ppatterncheckNode1 = new AEmptyPatternCheck(temptyNode2);
        }
	nodeList.add(ppatterncheckNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AThisPatternCheck */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternCheck ppatterncheckNode1;
        {
            // Block
        TThis tthisNode2;
        tthisNode2 = (TThis)nodeArrayList1.get(0);

        ppatterncheckNode1 = new AThisPatternCheck(tthisNode2);
        }
	nodeList.add(ppatterncheckNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AIdPatternCheck */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPatternCheck ppatterncheckNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ppatterncheckNode1 = new AIdPatternCheck(tidentifierNode2);
        }
	nodeList.add(ppatterncheckNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ATerminal$FunctionDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFunctionDef pfunctiondefNode1;
        pfunctiondefNode1 = (PFunctionDef)nodeArrayList1.get(0);
	if(pfunctiondefNode1 != null)
	{
	  listNode2.add(pfunctiondefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANonTerminal$FunctionDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFunctionDef pfunctiondefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfunctiondefNode2 = (PFunctionDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctiondefNode2 != null)
	{
	  listNode3.add(pfunctiondefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ATerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	if(pdeclNode1 != null)
	{
	  listNode2.add(pdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ANonTerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecl pdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclNode2 = (PDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclNode2 != null)
	{
	  listNode3.add(pdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ATerminal$Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TVariable tvariableNode1;
        tvariableNode1 = (TVariable)nodeArrayList1.get(0);
	if(tvariableNode1 != null)
	{
	  listNode2.add(tvariableNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ANonTerminal$Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TVariable tvariableNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tvariableNode2 = (TVariable)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tvariableNode2 != null)
	{
	  listNode3.add(tvariableNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ATerminal$Element */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PElement pelementNode1;
        pelementNode1 = (PElement)nodeArrayList1.get(0);
	if(pelementNode1 != null)
	{
	  listNode2.add(pelementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANonTerminal$Element */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PElement pelementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pelementNode2 = (PElement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pelementNode2 != null)
	{
	  listNode3.add(pelementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ATerminal$PatternExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPatternExpr ppatternexprNode1;
        ppatternexprNode1 = (PPatternExpr)nodeArrayList1.get(0);
	if(ppatternexprNode1 != null)
	{
	  listNode2.add(ppatternexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANonTerminal$PatternExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPatternExpr ppatternexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppatternexprNode2 = (PPatternExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppatternexprNode2 != null)
	{
	  listNode3.add(ppatternexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {11, SHIFT, 1}, {12, SHIFT, 2}, },
			{{-1, ERROR, 1}, {37, SHIFT, 7}, },
			{{-1, ERROR, 2}, {15, SHIFT, 8}, },
			{{-1, ERROR, 3}, {40, ACCEPT, -1}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 6}, {11, SHIFT, 1}, {12, SHIFT, 2}, },
			{{-1, ERROR, 7}, {13, SHIFT, 12}, },
			{{-1, ERROR, 8}, {5, SHIFT, 13}, {38, SHIFT, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 12}, {39, SHIFT, 17}, },
			{{-1, ERROR, 13}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {15, SHIFT, 8}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, ERROR, 14}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {15, SHIFT, 8}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 16}, {5, SHIFT, 13}, {16, SHIFT, 42}, {38, SHIFT, 14}, },
			{{-1, ERROR, 17}, {14, SHIFT, 44}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 20}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 45}, {17, SHIFT, 21}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 46}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, ERROR, 21}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, ERROR, 22}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, ERROR, 23}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, ERROR, 24}, {13, SHIFT, 52}, },
			{{-1, ERROR, 25}, {9, SHIFT, 53}, {17, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 58}, {33, SHIFT, 59}, {38, SHIFT, 60}, {39, SHIFT, 61}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 25}, {13, SHIFT, 20}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 13}, {6, SHIFT, 67}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 44}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 48}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 69}, {17, SHIFT, 21}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 46}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, ERROR, 49}, {18, SHIFT, 71}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 51}, {21, SHIFT, 72}, },
			{{-1, ERROR, 52}, {14, SHIFT, 73}, {39, SHIFT, 74}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 54}, {9, SHIFT, 53}, {17, SHIFT, 54}, {29, SHIFT, 55}, {30, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 58}, {33, SHIFT, 59}, {38, SHIFT, 60}, {39, SHIFT, 61}, },
			{{-1, ERROR, 55}, {30, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 58}, {33, SHIFT, 59}, {38, SHIFT, 60}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 33}, {10, SHIFT, 78}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 65}, {9, SHIFT, 53}, {17, SHIFT, 54}, {25, SHIFT, 79}, {29, SHIFT, 55}, {30, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 58}, {33, SHIFT, 59}, {38, SHIFT, 60}, {39, SHIFT, 61}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 67}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 72}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, ERROR, 73}, {24, SHIFT, 83}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 75}, {14, SHIFT, 84}, {39, SHIFT, 85}, },
			{{-1, ERROR, 76}, {9, SHIFT, 53}, {17, SHIFT, 54}, {18, SHIFT, 86}, {29, SHIFT, 55}, {30, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 58}, {33, SHIFT, 59}, {38, SHIFT, 60}, {39, SHIFT, 61}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 82}, {22, SHIFT, 87}, },
			{{-1, ERROR, 83}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, ERROR, 84}, {24, SHIFT, 89}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 39}, {34, SHIFT, 90}, },
			{{-1, ERROR, 87}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 89}, {5, SHIFT, 18}, {9, SHIFT, 19}, {13, SHIFT, 20}, {17, SHIFT, 21}, {19, SHIFT, 22}, {20, SHIFT, 23}, {23, SHIFT, 24}, {25, SHIFT, 25}, {34, SHIFT, 26}, {35, SHIFT, 27}, {36, SHIFT, 28}, {37, SHIFT, 29}, {38, SHIFT, 30}, {39, SHIFT, 31}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 29}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {6, 10}, },
			{{-1, 5}, {6, 11}, },
			{{-1, 32}, {2, 9}, },
			{{-1, 15}, {16, 43}, },
			{{-1, 33}, {14, 41}, },
			{{-1, 34}, {21, 49}, {22, 50}, {23, 51}, {44, 68}, {67, 81}, {72, 82}, {83, 88}, {87, 91}, {89, 92}, },
			{{-1, 35}, {20, 47}, {48, 70}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 39}, {29, 66}, },
			{{-1, 40}, },
			{{-1, 62}, {65, 80}, {76, 80}, },
			{{-1, 63}, },
			{{-1, 64}, {55, 77}, },
			{{-1, 6}, },
			{{-1, 16}, },
			{{-1, 75}, },
			{{-1, 48}, },
			{{-1, 65}, {54, 76}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'define', 'game'",
			"expecting: function",
			"expecting: '{'",
			"expecting: EOF",
			"expecting: '['",
			"expecting: keyword, identifier",
			"expecting: variable",
			"expecting: keyword, direction, '[', '{', '(', 'not', 'if', '#', '/', integer, coordinate, string, function, identifier, variable",
			"expecting: keyword, '}', identifier",
			"expecting: ']'",
			"expecting: keyword, operator, direction, 'define', 'game', '[', ']', '}', '(', ')', 'then', 'else', '/', integer, coordinate, string, function, identifier, variable",
			"expecting: keyword, direction, '[', ']', '(', '/', integer, coordinate, string, function, identifier, variable",
			"expecting: keyword, direction, '[', '(', 'not', 'if', '#', '/', integer, coordinate, string, function, identifier, variable",
			"expecting: direction, '(', '!', 'friend', 'foe', 'empty', 'this', identifier, variable",
			"expecting: keyword, operator, 'define', 'game', '[', '}', ')', 'then', 'else', identifier",
			"expecting: keyword, operator, 'define', 'game', '}', ')', 'then', 'else', identifier",
			"expecting: keyword, 'define', 'game', '}', ')', 'then', 'else', identifier",
			"expecting: keyword, '}', identifier, EOF",
			"expecting: ')'",
			"expecting: 'then'",
			"expecting: ']', variable",
			"expecting: direction, star qmark plus, '(', ')', '/', '!', 'friend', 'foe', 'empty', 'this', identifier, variable",
			"expecting: 'friend', 'foe', 'empty', 'this', identifier",
			"expecting: direction, '(', ')', '/', '!', 'friend', 'foe', 'empty', 'this', identifier, variable",
			"expecting: direction, '(', '/', '!', 'friend', 'foe', 'empty', 'this', identifier, variable",
			"expecting: '=>'",
			"expecting: direction, '(', ')', '!', 'friend', 'foe', 'empty', 'this', identifier, variable",
			"expecting: 'else'",
			"expecting: direction, star qmark plus, '(', ')', '/', '!', 'friend', 'foe', 'empty', 'this', integer, identifier, variable",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 3, 0, 4, 5, 3, 0, 3, 6, 7, 7, 8, 8, 9, 10, 10, 11, 12, 12, 12, 4, 13, 10, 10, 10, 14, 10, 10, 8, 8, 8, 15, 16, 16, 16, 10, 10, 8, 17, 8, 12, 10, 11, 11, 11, 18, 16, 19, 20, 21, 13, 22, 21, 21, 21, 21, 21, 21, 23, 21, 21, 24, 16, 12, 0, 10, 11, 10, 12, 25, 20, 20, 26, 21, 23, 10, 23, 16, 27, 12, 25, 20, 28, 12, 16, 12, 21, 16, 16, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
