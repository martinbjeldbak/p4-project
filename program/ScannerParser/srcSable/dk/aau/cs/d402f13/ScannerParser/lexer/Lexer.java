/* This file was generated by SableCC (http://www.sablecc.org/). */

package dk.aau.cs.d402f13.ScannerParser.lexer;

import java.io.*;
import dk.aau.cs.d402f13.ScannerParser.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            @SuppressWarnings("hiding") Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            @SuppressWarnings("hiding") Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            @SuppressWarnings("hiding") Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            @SuppressWarnings("hiding") Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEol(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDecimal(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLowercase(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUppercase(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUnichar(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStrchar(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeyword(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSharedOperator(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNormalOperator(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPatternOperator(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPatternOr(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPatternNot(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPatternKeyword(text, line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDirection(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDefine(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGame(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNot(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIf(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TThen(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TElse(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLet(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIn(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBkt(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBkt(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrc(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrc(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLPar(line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRPar(line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEql(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(text, line, pos); }
    Token new31(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TArrow(line, pos); }
    Token new32(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSlash(line, pos); }
    Token new33(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPound(line, pos); }
    Token new34(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEmark(line, pos); }
    Token new35(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TThis(line, pos); }
    Token new36(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStarQmarkPlus(text, line, pos); }
    Token new37(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInteger(text, line, pos); }
    Token new38(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCoordinate(text, line, pos); }
    Token new39(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TString(text, line, pos); }
    Token new40(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFunction(text, line, pos); }
    Token new41(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new42(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVariable(text, line, pos); }
    Token new43(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOperator(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 33, 6}, {34, 34, 7}, {35, 35, 8}, {36, 36, 9}, {37, 39, 1}, {40, 40, 10}, {41, 41, 11}, {42, 42, 12}, {43, 43, 13}, {44, 44, 14}, {45, 45, 15}, {46, 46, 1}, {47, 47, 16}, {48, 57, 17}, {58, 59, 1}, {60, 60, 18}, {61, 61, 19}, {62, 62, 20}, {63, 63, 21}, {64, 64, 1}, {65, 90, 22}, {91, 91, 23}, {92, 92, 24}, {93, 93, 25}, {94, 96, 1}, {97, 97, 26}, {98, 98, 27}, {99, 99, 26}, {100, 100, 28}, {101, 101, 29}, {102, 102, 30}, {103, 103, 31}, {104, 104, 32}, {105, 105, 33}, {106, 107, 26}, {108, 108, 34}, {109, 109, 26}, {110, 110, 35}, {111, 111, 26}, {112, 112, 36}, {113, 114, 26}, {115, 115, 37}, {116, 116, 38}, {117, 118, 26}, {119, 119, 39}, {120, 122, 26}, {123, 123, 40}, {124, 124, 41}, {125, 125, 42}, {126, 65535, 1}, },
            {},
            {},
            {},
            {{10, 10, 43}, },
            {},
            {{61, 61, 44}, },
            {{0, 33, 45}, {34, 34, 46}, {35, 91, 45}, {92, 92, 47}, {93, 65535, 45}, },
            {},
            {{65, 90, 48}, {97, 122, 49}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 50}, },
            {{61, 61, 51}, },
            {{61, 61, 52}, {62, 62, 53}, },
            {{61, 61, 54}, },
            {},
            {{48, 57, 55}, {65, 90, 56}, {97, 122, 57}, },
            {},
            {},
            {},
            {{65, 90, 58}, {97, 122, 59}, },
            {{65, 90, 58}, {97, 110, 59}, {111, 111, 60}, {112, 122, 59}, },
            {{65, 90, 58}, {97, 100, 59}, {101, 101, 61}, {102, 122, 59}, },
            {{65, 90, 58}, {97, 107, 59}, {108, 108, 62}, {109, 109, 63}, {110, 122, 59}, },
            {{65, 110, -29}, {111, 111, 64}, {112, 113, 59}, {114, 114, 65}, {115, 122, 59}, },
            {{65, 90, 58}, {97, 97, 66}, {98, 113, 59}, {114, 114, 67}, {115, 122, 59}, },
            {{65, 100, -30}, {101, 101, 68}, {102, 122, 59}, },
            {{65, 90, 58}, {97, 101, 59}, {102, 102, 69}, {103, 109, 59}, {110, 110, 70}, {111, 122, 59}, },
            {{65, 100, -30}, {101, 101, 71}, {102, 122, 59}, },
            {{65, 90, 58}, {97, 97, 72}, {98, 100, 59}, {101, 101, 73}, {102, 110, 59}, {111, 111, 74}, {112, 118, 59}, {119, 119, 75}, {120, 122, 59}, },
            {{65, 90, 58}, {97, 104, 59}, {105, 105, 76}, {106, 107, 59}, {108, 108, 77}, {109, 110, 59}, {111, 111, 78}, {112, 122, 59}, },
            {{65, 100, -30}, {101, 101, 79}, {102, 118, 59}, {119, 119, 80}, {120, 122, 59}, },
            {{65, 90, 58}, {97, 103, 59}, {104, 104, 81}, {105, 105, 82}, {106, 116, 59}, {117, 117, 83}, {118, 122, 59}, },
            {{65, 90, 58}, {97, 97, 84}, {98, 104, 59}, {105, 105, 85}, {106, 122, 59}, },
            {},
            {},
            {},
            {},
            {},
            {{0, 65535, -9}, },
            {},
            {{0, 65535, 86}, },
            {{65, 122, -11}, },
            {{65, 122, -11}, },
            {{48, 57, 50}, },
            {},
            {},
            {},
            {},
            {{48, 57, 55}, },
            {{48, 122, -24}, },
            {{65, 90, 87}, {97, 122, 57}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
            {{65, 90, 58}, {97, 97, 88}, {98, 122, 59}, },
            {{65, 101, -35}, {102, 102, 89}, {103, 122, 59}, },
            {{65, 90, 58}, {97, 114, 59}, {115, 115, 90}, {116, 122, 59}, },
            {{65, 90, 58}, {97, 111, 59}, {112, 112, 91}, {113, 122, 59}, },
            {{65, 100, -30}, {101, 101, 92}, {102, 122, 59}, },
            {{65, 104, -38}, {105, 105, 93}, {106, 122, 59}, },
            {{65, 90, 58}, {97, 108, 59}, {109, 109, 94}, {110, 122, 59}, },
            {{65, 104, -38}, {105, 105, 95}, {106, 122, 59}, },
            {{65, 104, -38}, {105, 105, 96}, {106, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
            {{65, 90, 58}, {97, 115, 59}, {116, 116, 97}, {117, 122, 59}, },
            {{65, 108, -68}, {109, 109, 98}, {110, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 115, -73}, {116, 116, 99}, {117, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 100, -30}, {101, 101, 100}, {102, 122, 59}, },
            {{65, 90, 58}, {97, 97, 101}, {98, 122, 59}, },
            {{65, 114, -64}, {115, 115, 102}, {116, 122, 59}, },
            {{65, 115, -73}, {116, 116, 103}, {117, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 100, -30}, {101, 101, 104}, {102, 104, 59}, {105, 105, 105}, {106, 122, 59}, },
            {{65, 100, -30}, {101, 101, 106}, {102, 115, 59}, {116, 116, 107}, {117, 122, 59}, },
            {{65, 90, 58}, {97, 113, 59}, {114, 114, 108}, {115, 122, 59}, },
            {{65, 107, -31}, {108, 108, 109}, {109, 122, 59}, },
            {{65, 90, 58}, {97, 99, 59}, {100, 100, 110}, {101, 109, 59}, {110, 110, 111}, {111, 122, 59}, },
            {{0, 65535, -9}, },
            {{65, 122, -59}, },
            {{65, 113, -85}, {114, 114, 112}, {115, 122, 59}, },
            {{65, 104, -38}, {105, 105, 113}, {106, 122, 59}, },
            {{65, 100, -30}, {101, 101, 114}, {102, 122, 59}, },
            {{65, 115, -73}, {116, 116, 115}, {117, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 100, -30}, {101, 101, 116}, {102, 122, 59}, },
            {{65, 100, -30}, {101, 101, 117}, {102, 122, 59}, },
            {{65, 99, -87}, {100, 100, 118}, {101, 122, 59}, },
            {{65, 90, 58}, {97, 102, 59}, {103, 103, 119}, {104, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 100, -30}, {101, 101, 120}, {102, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 90, 58}, {97, 98, 59}, {99, 99, 121}, {100, 122, 59}, },
            {{65, 90, 58}, {97, 120, 59}, {121, 121, 122}, {122, 122, 59}, },
            {{65, 114, -64}, {115, 115, 123}, {116, 122, 59}, },
            {{65, 90, 58}, {97, 116, 59}, {117, 117, 124}, {118, 122, 59}, },
            {{65, 90, 58}, {97, 109, 59}, {110, 110, 125}, {111, 122, 59}, },
            {{65, 114, -64}, {115, 115, 126}, {116, 122, 59}, },
            {{65, 66, 58}, {67, 67, 127}, {68, 90, 58}, {97, 122, 59}, },
            {{65, 107, -31}, {108, 108, 128}, {109, 122, 59}, },
            {{65, 109, -106}, {110, 110, 129}, {111, 122, 59}, },
            {{65, 107, -31}, {108, 108, 130}, {109, 122, 59}, },
            {{65, 115, -73}, {116, 116, 131}, {117, 122, 59}, },
            {{65, 66, 58}, {67, 67, 132}, {68, 122, -108}, },
            {{65, 99, -87}, {100, 100, 133}, {101, 122, 59}, },
            {{65, 109, -106}, {110, 110, 134}, {111, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 120, -103}, {121, 121, 135}, {122, 122, 59}, },
            {{65, 109, -106}, {110, 110, 136}, {111, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
            {{65, 103, -40}, {104, 104, 137}, {105, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 100, -30}, {101, 101, 138}, {102, 122, 59}, },
            {{65, 100, -30}, {101, 101, 139}, {102, 122, 59}, },
            {{65, 104, -38}, {105, 105, 140}, {106, 122, 59}, },
            {{65, 111, -65}, {112, 112, 141}, {113, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
            {{65, 110, -29}, {111, 111, 142}, {112, 122, 59}, },
            {{65, 100, -30}, {101, 101, 143}, {102, 122, 59}, },
            {{65, 78, 58}, {79, 79, 144}, {80, 90, 58}, {97, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 103, -40}, {104, 104, 145}, {105, 122, 59}, },
            {{65, 110, -29}, {111, 111, 146}, {112, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 100, -30}, {101, 101, 147}, {102, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 99, -87}, {100, 100, 148}, {101, 122, 59}, },
            {{65, 115, -73}, {116, 116, 149}, {117, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 113, -85}, {114, 114, 150}, {115, 122, 59}, },
            {{65, 90, 58}, {97, 97, 59}, {98, 98, 151}, {99, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 109, -106}, {110, 110, 152}, {111, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 113, -85}, {114, 114, 153}, {115, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 109, -106}, {110, 110, 154}, {111, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
            {{65, 114, -64}, {115, 115, 155}, {116, 122, 59}, },
            {{65, 107, -31}, {108, 108, 156}, {109, 122, 59}, },
            {{65, 99, -87}, {100, 100, 157}, {101, 122, 59}, },
            {{65, 99, -87}, {100, 100, 158}, {101, 122, 59}, },
            {{65, 99, -87}, {100, 100, 159}, {101, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 100, -30}, {101, 101, 160}, {102, 122, 59}, },
            {{65, 104, -38}, {105, 105, 161}, {106, 122, 59}, },
            {{65, 100, -30}, {101, 101, 162}, {102, 122, 59}, },
            {{65, 104, -38}, {105, 105, 163}, {106, 122, 59}, },
            {{65, 67, 58}, {68, 68, 164}, {69, 76, 58}, {77, 77, 165}, {78, 90, 58}, {97, 122, 59}, },
            {{65, 115, -73}, {116, 116, 166}, {117, 122, 59}, },
            {{65, 113, -85}, {114, 114, 167}, {115, 122, 59}, },
            {{65, 115, -73}, {116, 116, 168}, {117, 122, 59}, },
            {{65, 113, -85}, {114, 114, 169}, {115, 122, 59}, },
            {{65, 110, -29}, {111, 111, 170}, {112, 122, 59}, },
            {{65, 104, -38}, {105, 105, 171}, {106, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 104, -38}, {105, 105, 172}, {106, 122, 59}, },
            {{65, 110, -29}, {111, 111, 173}, {112, 122, 59}, },
            {{65, 90, 58}, {97, 117, 59}, {118, 118, 174}, {119, 122, 59}, },
            {{65, 110, -29}, {111, 111, 175}, {112, 122, 59}, },
            {{65, 110, -29}, {111, 111, 176}, {112, 122, 59}, },
            {{65, 111, -65}, {112, 112, 177}, {113, 122, 59}, },
            {{65, 100, -30}, {101, 101, 178}, {102, 122, 59}, },
            {{65, 109, -106}, {110, 110, 179}, {111, 122, 59}, },
            {{65, 109, -106}, {110, 110, 180}, {111, 122, 59}, },
            {{65, 114, -64}, {115, 115, 181}, {116, 122, 59}, },
            {{65, 114, -64}, {115, 115, 182}, {116, 122, 59}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 5, 1, 0, 0, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 4, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 0, 9, -1, 39, -1, 42, 42, 37, 9, 9, 31, 9, 38, 41, 41, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 18, 22, 40, 40, 14, 40, 14, 40, 40, 40, 14, 14, 40, 40, 40, 40, 40, -1, 41, 40, 40, 40, 40, 13, 40, 40, 40, 40, 21, 40, 17, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 20, 40, 40, 16, 7, 40, 7, 40, 40, 40, 40, 19, 7, 40, 40, 40, 7, 40, 40, 7, 40, 13, 40, 40, 7, 40, 40, 7, 40, 7, 40, 7, 40, 15, 13, 7, 40, 40, 40, 40, 40, 7, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 7, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 7, 7, 7, 7, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
