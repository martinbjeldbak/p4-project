Package dk.aau.cs.d402f13.ScannerParser;

Helpers
  unicode_input_character = [0..0xffff];
  unichar =
    [0x0041..0x005a] | [0x0061..0x007a] | [0x00aa..0x00aa] | [0x00b5..0x00b5] |
    [0x00ba..0x00ba] | [0x00c0..0x00d6] | [0x00d8..0x00f6] | [0x00f8..0x01f5] |
    [0x01fa..0x0217] | [0x0250..0x02a8] | [0x02b0..0x02b8] | [0x02bb..0x02c1] |
    [0x02d0..0x02d1] | [0x02e0..0x02e4] | [0x037a..0x037a] | [0x0386..0x0386] |
    [0x0388..0x038a] | [0x038c..0x038c] | [0x038e..0x03a1] | [0x03a3..0x03ce] |
    [0x03d0..0x03d6] | [0x03da..0x03da] | [0x03dc..0x03dc] | [0x03de..0x03de] |
    [0x03e0..0x03e0] | [0x03e2..0x03f3] | [0x0401..0x040c] | [0x040e..0x044f] |
    [0x0451..0x045c] | [0x045e..0x0481] | [0x0490..0x04c4] | [0x04c7..0x04c8] |
    [0x04cb..0x04cc] | [0x04d0..0x04eb] | [0x04ee..0x04f5] | [0x04f8..0x04f9] |
    [0x0531..0x0556] | [0x0559..0x0559] | [0x0561..0x0587] | [0x05d0..0x05ea] |
    [0x05f0..0x05f2] | [0x0621..0x063a] | [0x0640..0x064a] | [0x0671..0x06b7] |
    [0x06ba..0x06be] | [0x06c0..0x06ce] | [0x06d0..0x06d3] | [0x06d5..0x06d5] |
    [0x06e5..0x06e6] | [0x0905..0x0939] | [0x093d..0x093d] | [0x0958..0x0961] |
    [0x0985..0x098c] | [0x098f..0x0990] | [0x0993..0x09a8] | [0x09aa..0x09b0] |
    [0x09b2..0x09b2] | [0x09b6..0x09b9] | [0x09dc..0x09dd] | [0x09df..0x09e1] |
    [0x09f0..0x09f1] | [0x0a05..0x0a0a] | [0x0a0f..0x0a10] | [0x0a13..0x0a28] |
    [0x0a2a..0x0a30] | [0x0a32..0x0a33] | [0x0a35..0x0a36] | [0x0a38..0x0a39] |
    [0x0a59..0x0a5c] | [0x0a5e..0x0a5e] | [0x0a72..0x0a74] | [0x0a85..0x0a8b] |
    [0x0a8d..0x0a8d] | [0x0a8f..0x0a91] | [0x0a93..0x0aa8] | [0x0aaa..0x0ab0] |
    [0x0ab2..0x0ab3] | [0x0ab5..0x0ab9] | [0x0abd..0x0abd] | [0x0ae0..0x0ae0] |
    [0x0b05..0x0b0c] | [0x0b0f..0x0b10] | [0x0b13..0x0b28] | [0x0b2a..0x0b30] |
    [0x0b32..0x0b33] | [0x0b36..0x0b39] | [0x0b3d..0x0b3d] | [0x0b5c..0x0b5d] |
    [0x0b5f..0x0b61] | [0x0b85..0x0b8a] | [0x0b8e..0x0b90] | [0x0b92..0x0b95] |
    [0x0b99..0x0b9a] | [0x0b9c..0x0b9c] | [0x0b9e..0x0b9f] | [0x0ba3..0x0ba4] |
    [0x0ba8..0x0baa] | [0x0bae..0x0bb5] | [0x0bb7..0x0bb9] | [0x0c05..0x0c0c] |
    [0x0c0e..0x0c10] | [0x0c12..0x0c28] | [0x0c2a..0x0c33] | [0x0c35..0x0c39] |
    [0x0c60..0x0c61] | [0x0c85..0x0c8c] | [0x0c8e..0x0c90] | [0x0c92..0x0ca8] |
    [0x0caa..0x0cb3] | [0x0cb5..0x0cb9] | [0x0cde..0x0cde] | [0x0ce0..0x0ce1] |
    [0x0d05..0x0d0c] | [0x0d0e..0x0d10] | [0x0d12..0x0d28] | [0x0d2a..0x0d39] |
    [0x0d60..0x0d61] | [0x0e01..0x0e2e] | [0x0e30..0x0e30] | [0x0e32..0x0e33] |
    [0x0e40..0x0e46] | [0x0e81..0x0e82] | [0x0e84..0x0e84] | [0x0e87..0x0e88] |
    [0x0e8a..0x0e8a] | [0x0e8d..0x0e8d] | [0x0e94..0x0e97] | [0x0e99..0x0e9f] |
    [0x0ea1..0x0ea3] | [0x0ea5..0x0ea5] | [0x0ea7..0x0ea7] | [0x0eaa..0x0eab] |
    [0x0ead..0x0eae] | [0x0eb0..0x0eb0] | [0x0eb2..0x0eb3] | [0x0ebd..0x0ebd] |
    [0x0ec0..0x0ec4] | [0x0ec6..0x0ec6] | [0x0edc..0x0edd] | [0x0f40..0x0f47] |
    [0x0f49..0x0f69] | [0x10a0..0x10c5] | [0x10d0..0x10f6] | [0x1100..0x1159] |
    [0x115f..0x11a2] | [0x11a8..0x11f9] | [0x1e00..0x1e9b] | [0x1ea0..0x1ef9] |
    [0x1f00..0x1f15] | [0x1f18..0x1f1d] | [0x1f20..0x1f45] | [0x1f48..0x1f4d] |
    [0x1f50..0x1f57] | [0x1f59..0x1f59] | [0x1f5b..0x1f5b] | [0x1f5d..0x1f5d] |
    [0x1f5f..0x1f7d] | [0x1f80..0x1fb4] | [0x1fb6..0x1fbc] | [0x1fbe..0x1fbe] |
    [0x1fc2..0x1fc4] | [0x1fc6..0x1fcc] | [0x1fd0..0x1fd3] | [0x1fd6..0x1fdb] |
    [0x1fe0..0x1fec] | [0x1ff2..0x1ff4] | [0x1ff6..0x1ffc] | [0x207f..0x207f] |
    [0x2102..0x2102] | [0x2107..0x2107] | [0x210a..0x2113] | [0x2115..0x2115] |
    [0x2118..0x211d] | [0x2124..0x2124] | [0x2126..0x2126] | [0x2128..0x2128] |
    [0x212a..0x2131] | [0x2133..0x2138] | [0x3005..0x3005] | [0x3031..0x3035] |
    [0x3041..0x3094] | [0x309b..0x309e] | [0x30a1..0x30fa] | [0x30fc..0x30fe] |
    [0x3105..0x312c] | [0x3131..0x318e] | [0x4e00..0x9fa5] | [0xac00..0xd7a3] |
    [0xf900..0xfa2d] | [0xfb00..0xfb06] | [0xfb13..0xfb17] | [0xfb1f..0xfb28] |
    [0xfb2a..0xfb36] | [0xfb38..0xfb3c] | [0xfb3e..0xfb3e] | [0xfb40..0xfb41] |
    [0xfb43..0xfb44] | [0xfb46..0xfbb1] | [0xfbd3..0xfd3d] | [0xfd50..0xfd8f] |
    [0xfd92..0xfdc7] | [0xfdf0..0xfdfb] | [0xfe70..0xfe72] | [0xfe74..0xfe74] |
    [0xfe76..0xfefc] | [0xff21..0xff3a] | [0xff41..0xff5a] | [0xff66..0xffbe] |
    [0xffc2..0xffc7] | [0xffca..0xffcf] | [0xffd2..0xffd7] | [0xffda..0xffdc];
    
  tab              = 9;
  cr               = 0x000d;
  lf               = 0x000a;
    
  input_character = [unicode_input_character - [cr + lf]];
  
  line_terminator = lf | cr | cr lf;  
  end_of_line_comment = '//' input_character* line_terminator?;

  decimal          = ['0' .. '9'];
  lowercase        = ['a' .. 'z'];
  uppercase        = ['A' .. 'Z'];
  anycase          = lowercase | uppercase;
  l_bkt            = '[';
  r_bkt            = ']';
  l_brc            = '{';
  r_brc            = '}';
  l_par            = '(';
  r_par            = ')';
  eql              = '=';
  comma            = ',';
  arrow            = '=>';
  slash            = '/';
  pound            = '#';
  star             = '*';
  emark            = '!';
  qmark            = '?';
  plus             = '+';
  quote            = '"';
  backslash        = '\';
  direction        = 'n' | 'e' | 's' | 'w' | 'ne' | 'nw' | 'se' | 'sw';
  this             = 'this';
  keyword          = 'piece' | 'width' | 'height'
                   | 'title' | 'players' | 'turnOrder' | 'board'
                   | 'grid' | 'setup' | 'wall' | 'name' | 'possibleDrops'
                   | 'possibleMoves' | 'winCondition' | 'tieCondition';
  normal_operator  = '-' | '!=' | '==' | '<=' | '>=' | '<' | '>';
  pattern_operator = qmark;
  pattern_not      = emark;
  pattern_or       = '|';
  
  friend = 'friend';
  foe = 'foe';
  empty = 'empty';

  variable         = '$' (lowercase | uppercase)+;
  
  escape_sequence = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\';
  strchar = [input_character - ['"' + '\']] | escape_sequence;

Tokens
  comment          = end_of_line_comment;
  integer          = ['0' .. '9']+;
  eol              = cr | lf | cr lf;
  blank            = ' ' | tab;
  direction        = direction;
  keyword          = keyword;
  
  normal_operator  = normal_operator;
  pattern_operator = pattern_operator;
  pattern_or       = pattern_or;
  emark            = emark;
  pattern_not      = pattern_not;
  slash            = slash;
  friend           = friend;
  foe              = foe;
  empty            = empty;
  define           = 'define';
  game             = 'game';
  not        = 'not';
  if         = 'if';
  then       = 'then';
  else       = 'else';
  let        = 'let';
  in         = 'in';
  l_bkt      = l_bkt;
  r_bkt      = r_bkt;
  l_brc      = l_brc;
  r_brc      = r_brc;
  l_par      = l_par;
  r_par      = r_par;
  eql        = eql;
  comma      = comma;
  arrow      = arrow;
  pound      = pound;
  star       = star;
  this       = this;
  qmark      = qmark;
  plus       = plus;

  
 
  lowercase        = lowercase;
  uppercase        = uppercase;
  anycase          = anycase;
  unichar          = unichar;
  coordinate = uppercase+ decimal+;
  string     = '"' (strchar | '\' input_character)* '"';

  /* identifiers */
  function   = lowercase anycase+;
  identifier = uppercase anycase*;
  variable   = '$' anycase+;
 
Ignored Tokens
  blank, eol, comment;
  
Productions
  /* program structure*/
  program            = function_def* game_decl;
  function_def       = define function l_bkt variable* r_bkt expression;
  game_decl          = game decl_struct;
  decl_struct        = l_brc decl+ r_brc;
  decl               = {keystruc} keyword structure
                     | {idstruc} identifier structure;                  
  structure          = {declstruc} decl_struct
                     | {expr} expression;
                     
  shared_operator    = {star} star
                     | {plus} plus;
                     
    operator         = {norm_op} normal_operator
                     | {shared_op} shared_operator
                     | {slash} slash;   
                   
    star_qmark_plus  = {star} star 
                     | {qmark} qmark
                     | {plus} plus;                
  
  /* expressions */
  expression    = {elopexp} element operator expression
                | {assign} assignment
                | {if} if_expr
                | {lambda} lambda_expr
                | {el} element list?
                | {not} not expression;
  element       = {expr} l_par expression r_par
                | {this} this
                | {var} variable
                | {list} list
                | {pat} [left]:slash pattern [right]:slash
                | {key} keyword
                | {dir} direction
                | {cor} coordinate
                | {int} integer
                | {str} string
                | {id} identifier
                | {func} function;
  var_expr      = comma variable eql expression;
  assignment    = let variable eql [left]:expression var_expr* in [right]:expression; 
  if_expr       = if [left]:expression then [mid]:expression else [right]:expression;
  lambda_expr   = pound l_bkt variable* r_bkt arrow expression;
  list          = l_bkt element* r_bkt;
  
  /* patterns */
  pattern       = pattern_expr+;
  pattern_expr  = {patval} pattern_val star_qmark_plus?
                | {patvalexpr} pattern_val pattern_or pattern_expr;
  pattern_val   = {dir} direction
                | {var} variable
                | {patcheck} pattern_check
                | {emarkpatcheck} emark pattern_check
                | {lpatexprr} l_par pattern r_par integer?;
  pattern_check = {friend} friend
                | {foe} foe
                | {empty} empty
                | {this} this
                | {id} identifier;
  
